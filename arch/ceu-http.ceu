#ifndef _CEU_HTTP
#define _CEU_HTTP

input void REQUEST_FINISHED;
native @pure
        _SOUP_SESSION_FEATURE(); 

native @plain
        _SOUP_MESSAGE_NO_REDIRECT,
        _SOUP_LOGGER_LOG_BODY;

native @nohold
        _soup_session_add_feature(),
        _g_main_loop_unref(),
        _soup_message_new(),
        _soup_message_set_flags(),
        _soup_session_queue_message(),
        _printf(),
        _g_object_unref();

native/pre do
	##include <glib.h>
	##include <stdio.h>
	##include <stdlib.h>

  ##include <libsoup/soup.h>
end

native do
  void
  finished (SoupSession *session, SoupMessage *msg, gpointer loop)
  {
    g_main_loop_quit (loop);
    ceu_sys_go(&CEU_APP, CEU_IN_REQUEST_FINISHED, NULL);
  }
end


class HTTPClient with 
  function (char[]& method, char[]& uri, char[]& response) => 
                                                  HTTPClient do_request;

  var char[]& uri;
  var char[]& method;
  var char[]& response;
do
  function (char[]& method, char[]& uri, char[]& response) => 
                                                  HTTPClient do_request do
    this.uri      = &uri;
    this.method   = &method;
    this.response = &response;
  end

  var _SoupSession &?session;
    finalize 
      session = &_soup_session_new ();
    with
      _g_object_unref (&&session!);
    end
  
  /* var _SoupLogger &?logger; */
  /*   finalize */
  /*     logger = &_soup_logger_new (_SOUP_LOGGER_LOG_BODY, -1); */
  /*   with */
  /*     _g_object_unref (&&logger!); */
  /*   end */

  /* _soup_session_add_feature (&&session!, */ 
  /*                            _SOUP_SESSION_FEATURE (&&logger!)); */
  
  var _GMainLoop &?main_loop;
    finalize
      main_loop = &_g_main_loop_new (null, true);
    with
      _g_main_loop_unref (&&main_loop!);
    end

  spawn do 
    async/thread (main_loop) do
      _g_main_loop_run (&&main_loop!);
    end
    await FOREVER;
  end

  var _SoupMessage &?msg;
    finalize
      msg = &_soup_message_new ((_char&&)&&method,
                                (_char&&)&&uri);
    with
    end
	
  _soup_message_set_flags (&&msg!, _SOUP_MESSAGE_NO_REDIRECT);

  _g_object_ref (&&msg!) 
    finalize with
      _g_object_unref (&&msg!);
    end;

  _soup_session_queue_message (&&session!, &&msg!, _finished, 
                               &&main_loop!);

  await REQUEST_FINISHED;
  /* var char&& r = &&msg!.response_body:data[0]; */
  /* response = [] .. (char[])(&&r); */
  _printf ("%s\n", &&msg!.response_body:data[0]); 

end


/***********    async clock block   *************/
spawn do
  async do 
    var s64 base, current, tmp;
    base = _g_get_monotonic_time ();
    current = 0;
    tmp = 0;
    loop do
      current = _g_get_monotonic_time ();
      tmp = current - base;
      
      base = current;
      emit (tmp)us;
    end
  end
  await FOREVER;
end

#endif
