#include "ceu-http.ceu"

native @plain 
        _G_FILE_TEST_IS_REGULAR;

native @nohold 
        _g_file_test ();

[[json = require ('json')]]

data Class with
  var _char[128] image_class;
  var float score;
  var _char[128] hierarchy;
end

class WatsonVisualRecognition with 
  var char[]& api_key;
  var char[]& img_uri;
  var Class[]& classes;
do
  var char[] method = [] .. "GET";
  var char[] uri = [] .. "https://gateway-a.watsonplatform.net/visual-recognition/api/v3/classify";
  var int status = 0;
  var char[] response;

  if (_g_file_test (&&img_uri[0], _G_FILE_TEST_IS_REGULAR)) then /*file exists*/
    pool QueryParams[] query;
    query = new QueryParams.CONS ("api_key", (_char&&)&&api_key,
              QueryParams.CONS ("version", "2016-05-19", 
                  QueryParams.NIL() ) );

    do HTTPClient with 
      this.method   = &method;
      this.uri      = &uri;
      this.query    = &query;
      this.mp_data  = &img_uri;
      this.redirect = true;
      this.status   = &status;
      this.response = &response;
    end;

  else
    pool QueryParams[] query;
    query = new QueryParams.CONS ("api_key", (_char&&)&&api_key,
              QueryParams.CONS ("version", "2016-05-19", 
                QueryParams.CONS ("url", (_char&&)&&img_uri, 
                  QueryParams.NIL() ) ) );

    img_uri = [] .. "";
    do HTTPClient with 
      this.method   = &method;
      this.uri      = &uri;
      this.query    = &query;
      this.mp_data  = &img_uri;
      this.redirect = true;
      this.status   = &status;
      this.response = &response;
    end;
  end

  [[
      resp = @response
      decoded = json.decode (resp)

     images = decoded.images
     classes = {}
     for i=1, #images do
       classifiers = decoded.images[i].classifiers
       for j=1, #classifiers do
         for k=1, #classifiers[j].classes do
           table.insert (classes, classifiers[j].classes[k])
         end
       end
     end
  ]]

  var int num_classes = [[ #classes]];

  loop i in num_classes  do
    var char[] img_class = [[ classes[@i + 1].class]];
    var char[] hierarchy = [[ classes[@i + 1].type_hierarchy or ""]];
    var float score = [[tonumber (classes[@i + 1].score) ]];
    var Class c = Class ((_char&&)&&img_class, score, (_char&&)&&hierarchy);
    classes = [] .. classes .. [c];
  end
end
